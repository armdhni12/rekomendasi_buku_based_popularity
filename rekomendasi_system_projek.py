# -*- coding: utf-8 -*-
"""rekomendasi_system_projek.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBdvTXamz0oDTmhag1dBh3FYoolh3VjZ

# Data Collecting and Data Understanding

melakukan kolekting dataset yang diperoleh melalui platform public data yaitu kaggle menggunakan Kaggle API. dataset yang akan digunakan adalah dataset Book recommendation yang terdiri dari file user,books dan rating
"""

!kaggle datasets download -d arashnic/book-recommendation-dataset

"""Melakukan ekstraksi dataset atau unzipping file dataset yang akan digunakan"""

!unzip /content/book-recommendation-dataset.zip

"""membaca data data yang telah dilakukan pengekstrakan dengan menggunakan library pandas"""

import pandas as pd

df_book=pd.read_csv('/content/Books.csv')
df_ratings=pd.read_csv('/content/Ratings.csv')
df_user=pd.read_csv('/content/Users.csv')

"""melakukan pengecekan lima data teratas dari df_book"""

df_book.head(5)

"""melakukan pengecekan terhadap lima data teratas pada rating dataframe"""

df_ratings.head(5)

"""melakukan pengecekan terhadap lima data teratas pada user dataframe"""

df_user.head(5)

"""melakukan pengecekan jumlah baris dan kolom pada masing masing dataframe untuk mengetahui jumlah data """

df_book.shape

df_ratings.shape

df_user.shape

"""# Data Preprocessing

melakukan pengecekan jumlah data yang memiliki missing value pada masing masing dataframe
"""

df_book.isna().sum()

"""#

melakukan dropping data yang memiliki missing value pada df_book
"""

df_book.dropna(inplace=True)

"""melakukan pengecekan kembali jumlah missing value pada df_book setelah dilakukan drop"""

df_book.isna().sum()

df_book.describe()

"""dapat terlihat jika judul buku yang memiliki popularitas tertinggi adalah Selected Poems dan author dengan popularitas tertinggi adalah agatha christie

melakukan pengecekan terhadap jumlah data duplikat pada dataframe books
"""

df_book.duplicated().sum()

"""Melakukan pengecekan terhadap missig value pada ratings dataframe"""

df_ratings.isna().sum()

"""melakukan pengecekan terhadap jumlah data yang memiliki duplikat pada dataframe ratings"""

df_ratings.duplicated().sum()



"""# Popularity Based recomendation system

membentuk dataframe baru dengan menggunakan gabungan antara books dataframe dan rating dataframe
"""

df_new=df_book.merge(df_ratings,on='ISBN')
df_new.head()

"""melakukan pengecekan jumlah kolom dan baris pada dataframe baru yang merupakan gabungan dari dataframe book dan rating"""

df_new.shape

"""membuat dataframe baru yang memuat judul buku dan nilai jumlah keseluruhan rating dengan melakukan pengelompokan berdasarkan kritera book title kemudian melakukan reset index dengan melakukan drop kolom pada df_new selain kolom Book_title dan Book-Rating"""

df_with_counted_ratings=df_new.groupby(['Book-Title']).count().reset_index()[['Book-Title','Book-Rating']].rename(columns={'Book-Rating':'Counted-Rating'})
df_with_counted_ratings.head()

df_with_counted_ratings.describe()

"""melakukan pengecekan terhadap judul buku yang memiliki paling banyak pemberian ratings"""

df_with_counted_ratings.nlargest(3,'Counted-Rating')

"""ternyata judul buku yang memiliki penilaian terbanya ada pada judul Wild Animus pada urutan pertama

proses selanjutnya adalah membuat dataframe baru yang terdiri dari judul buku dan nilai rata rata rating
"""

df_with_avg_ratings=df_new.groupby(['Book-Title']).mean().reset_index()[['Book-Title','Book-Rating']].rename(columns={'Book-Rating':'Average-Rating'})
df_with_avg_ratings.head()

"""melakukan penggabungan dataframe counted rating dan average rating berdasarkan Book-Title kemudian mengurutkan nilai dengan besaran nilai pada Counted-Rating"""

books_sorted=df_with_counted_ratings.merge(df_with_avg_ratings,on='Book-Title').sort_values(by=['Counted-Rating'],ascending=False)
books_sorted.head(5)

"""membuat dataframe popular_books dengan menggabungkan data pada dataframe book_sorted yang memiliki nilai Counted-Rating lebih dari 500 lalu mengurutkannya berdasarkan nilai Average-Rating"""

popular_books=books_sorted[books_sorted['Counted-Rating']>500].sort_values(by=['Average-Rating'],ascending=False).head(100)
popular_books.head(10)

popular_books.shape

"""mendapatkan hasil plotting sepuluh judul buku terpopuler berdasarkan nilai rata rata rating"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,6))
sns.barplot(x=popular_books['Average-Rating'].head(10),y=popular_books['Book-Title'].head(10));

popular_books['Book-Title'].head(10).to_frame()

